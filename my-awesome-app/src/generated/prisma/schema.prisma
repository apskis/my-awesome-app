generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  password          String?
  accounts          Account[]
  categories        Category[]
  dailyNotes        DailyNote[]
  knowledgeArticles KnowledgeArticle[]
  notes             Note[]
  projects          Project[]
  sessions          Session[]
  tasks             Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  status     NoteStatus @default(DRAFT)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags       NoteTag[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]

  @@unique([name, userId])
  @@index([userId])
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String    @default("#6B7280")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  notes     NoteTag[]

  @@index([name])
}

model NoteTag {
  id     String @id @default(cuid())
  noteId String
  tagId  String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([noteId, tagId])
  @@index([tagId])
}

model DailyNote {
  id        String   @id @default(cuid())
  date      DateTime @unique
  content   String   @db.Text
  mood      String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  completed   Boolean      @default(false)
  priority    TaskPriority @default(LOW)
  dueDate     DateTime?
  userId      String
  projectId   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([completed])
  @@index([dueDate])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  status      ProjectStatus @default(PLANNING)
  progress    Int           @default(0)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([userId])
  @@index([status])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String   @db.Text
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KnowledgeArticle {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  category  String?
  tags      String[]
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
}

enum NoteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}
