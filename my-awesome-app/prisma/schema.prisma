// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  password           String?             // For email/password authentication
  accounts           Account[]
  sessions           Session[]
  notes              Note[]
  categories         Category[]
  dailyNotes         DailyNote[]
  tasks              Task[]
  projects           Project[]
  knowledgeArticles  KnowledgeArticle[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
enum NoteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Note {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  status     NoteStatus @default(DRAFT)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String
  categoryId String?

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags       NoteTag[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6") // Default blue color
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes Note[]

  @@unique([name, userId])
  @@index([userId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#6B7280") // Default gray color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes NoteTag[]

  @@index([name])
}

model NoteTag {
  noteId String
  tagId  String

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
  @@index([tagId])
}

// Template models
model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String   @db.Text
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
}

// Daily Note / Journal models
enum Mood {
  GREAT
  GOOD
  NEUTRAL
  BAD
  TERRIBLE
}

model DailyNote {
  id        String   @id @default(cuid())
  date      DateTime @unique
  content   String   @db.Text
  mood      Mood?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

// Task management models
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id        String        @id @default(cuid())
  title     String
  completed Boolean       @default(false)
  priority  TaskPriority  @default(MEDIUM)
  dueDate   DateTime?
  userId    String
  projectId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([projectId])
  @@index([dueDate])
}

// Project management models
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  status      ProjectStatus @default(PLANNING)
  progress    Int           @default(0) // 0-100
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@index([userId])
  @@index([status])
}

// Knowledge Hub models
model KnowledgeArticle {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  category  String
  tags      String[] // Simple array of tag strings
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
}
